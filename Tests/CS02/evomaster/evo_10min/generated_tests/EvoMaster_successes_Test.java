import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-01-09T18:09:51.610637901+01:00[Europe/Rome]
 * <br>
*  The generated test suite contains 12 tests
 * <br>
*  Covered targets: 24
 * <br>
*  Used time: 0h 10m 1s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080/";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"bUaV6HdJ5BtQF\", " + 
                    " \"arrivalDateTime\": \"2017-01-09T19:33:00\", " + 
                    " \"quotaFilled\": 559, " + 
                    " \"quotaFilledPercentage\": 63, " + 
                    " \"route\": { " + 
                    " \"id\": 631, " + 
                    " \"name\": \"g2wK\", " + 
                    " \"arrivalAirport\": { " + 
                    " \"name\": \"HA0UJ5L_W\", " + 
                    " \"capacity\": 427, " + 
                    " \"location\": \"GdY0NeUOmfK2\" " + 
                    " } " + 
                    " }, " + 
                    " \"plane\": { " + 
                    " \"id\": 422, " + 
                    " \"name\": \"rGrhhEW6G7cc\", " + 
                    " \"company\": { " + 
                    " \"name\": \"NzCphfnKEyVMK\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/flight")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("bUaV6HdJ5BtQF"))
                .body("'departureDateTime'", nullValue())
                .body("'arrivalDateTime'", containsString("2017-01-09T19:33:00.000+0000"))
                .body("'duration'", nullValue())
                .body("'quota'", nullValue())
                .body("'quotaFilled'", numberMatches(559.0))
                .body("'quotaFilledPercentage'", numberMatches(63.0))
                .body("'route'.'name'", containsString("g2wK"))
                .body("'route'.'departureAirport'", nullValue())
                .body("'route'.'arrivalAirport'.'name'", containsString("HA0UJ5L_W"))
                .body("'route'.'arrivalAirport'.'capacity'", numberMatches(427.0))
                .body("'route'.'arrivalAirport'.'location'", containsString("GdY0NeUOmfK2"))
                .body("'plane'.'name'", containsString("rGrhhEW6G7cc"))
                .body("'plane'.'numberOfSeats'", nullValue())
                .body("'plane'.'company'.'name'", containsString("NzCphfnKEyVMK"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/ticket/109")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'ticketCode'", containsString("JC1Zde"))
                .body("'flight'", nullValue())
                .body("'price'", numberMatches(646.0))
                .body("'isSold'", equalTo(false))
                .body("'hibernateLazyInitializer'.isEmpty()", is(true));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"bcGACmDoM\", " + 
                    " \"numberOfSeats\": 173 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/plane")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("bcGACmDoM"))
                .body("'numberOfSeats'", numberMatches(173.0))
                .body("'company'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"ticketCode\": \"TrgmchTZqCBJZ\", " + 
                    " \"price\": 659, " + 
                    " \"isSold\": false " + 
                    " } ")
                .put(baseUrlOfSut + "/api/ticket")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'ticketCode'", containsString("TrgmchTZqCBJZ"))
                .body("'flight'", nullValue())
                .body("'price'", numberMatches(659.0))
                .body("'isSold'", equalTo(false));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"y6SIswe0pJ74\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/route")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("y6SIswe0pJ74"))
                .body("'departureAirport'", nullValue())
                .body("'arrivalAirport'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/plane/214")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("xYc5XNx"))
                .body("'numberOfSeats'", numberMatches(585.0))
                .body("'company'", nullValue())
                .body("'hibernateLazyInitializer'.isEmpty()", is(true));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/company/505")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("mdDubbzDDD"))
                .body("'hibernateLazyInitializer'.isEmpty()", is(true));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"IwhT3xTMiZdan4ID\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/company")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("IwhT3xTMiZdan4ID"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/route/813")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("iJ0jX_7"))
                .body("'departureAirport'", nullValue())
                .body("'arrivalAirport'", nullValue())
                .body("'hibernateLazyInitializer'.isEmpty()", is(true));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/airport")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5645))
                .body("[0].'name'", containsString("xo1AHmhvqqrylz"))
                .body("[0].'capacity'", numberMatches(64.0))
                .body("[0].'location'", containsString("LU_y"))
                .body("[1].'name'", containsString("5igLYfNc"))
                .body("[1].'capacity'", numberMatches(215.0))
                .body("[1].'location'", containsString("HI2sGo8p8YNqPzT"))
                .body("[2].'name'", containsString("PhGxXHqZk4PLCjNs"))
                .body("[2].'capacity'", nullValue())
                .body("[2].'location'", containsString("Z"))
                ; // Skipping assertions on the remaining 5642 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"B8TE9faanfnM4yCZ\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/airport")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("B8TE9faanfnM4yCZ"))
                .body("'capacity'", nullValue())
                .body("'location'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/company")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5384))
                .body("[0].'name'", containsString("LIc7R4Ed1AekQW"))
                .body("[1].'name'", containsString("DBPE"))
                .body("[2].'name'", containsString("SHgzu"))
                ; // Skipping assertions on the remaining 5381 elements. This limit of 3 elements can be increased in the configurations
    }


}
