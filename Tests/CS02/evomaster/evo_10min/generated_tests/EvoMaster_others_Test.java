import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-01-09T18:09:51.637320149+01:00[Europe/Rome]
 * <br>
*  The generated test suite contains 9 tests
 * <br>
*  Covered targets: 9
 * <br>
*  Used time: 0h 10m 1s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080/";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 921, " + 
                    " \"name\": \"WcBbeqS\", " + 
                    " \"departureDateTime\": \"2003-13-26T24:24:-1\", " + 
                    " \"quota\": -1198888479, " + 
                    " \"quotaFilled\": 900, " + 
                    " \"route\": { " + 
                    " \"name\": \"UcDK9zdB\", " + 
                    " \"arrivalAirport\": { " + 
                    " \"id\": -453778199, " + 
                    " \"name\": \"tlLE60\" " + 
                    " } " + 
                    " }, " + 
                    " \"plane\": { " + 
                    " \"id\": 153, " + 
                    " \"name\": \"CIYeCzZ5bzjgJ\", " + 
                    " \"numberOfSeats\": 341 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/flight")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("JSON parse error: Cannot deserialize value of type `java.util.Date` from String \"2003-13-26T24:24:-1\": not a valid representation (error: Failed to parse Date value '2003-13-26T24:24:-1': Cannot parse date \"2003-13-26T24:24:-1\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.util.Date` from String \"2003-13-26T24:24:-1\": not a valid representation (error: Failed to parse Date value '2003-13-26T24:24:-1': Cannot parse date \"2003-13-26T24:24:-1\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null))\n at [Source: (PushbackInputStream); line: 1, column: 50] (through reference chain: com.app.entity.Flight[\"departureDateTime\"])"))
                .body("'path'", containsString("/api/flight"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"IkB\", " + 
                    " \"departureDateTime\": \"1961-01-21T22:-1:05\", " + 
                    " \"duration\": 423, " + 
                    " \"planeId\": 351, " + 
                    " \"routeId\": 164 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/flight")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("JSON parse error: Cannot deserialize value of type `java.util.Date` from String \"1961-01-21T22:-1:05\": not a valid representation (error: Failed to parse Date value '1961-01-21T22:-1:05': Cannot parse date \"1961-01-21T22:-1:05\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.util.Date` from String \"1961-01-21T22:-1:05\": not a valid representation (error: Failed to parse Date value '1961-01-21T22:-1:05': Cannot parse date \"1961-01-21T22:-1:05\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null))\n at [Source: (PushbackInputStream); line: 1, column: 36] (through reference chain: com.app.DTO.FlightDTO[\"departureDateTime\"])"))
                .body("'path'", containsString("/api/flight"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 893, " + 
                    " \"ticketCode\": \"yrxbaMobEZDIFjD\", " + 
                    " \"flight\": { " + 
                    " \"name\": \"\", " + 
                    " \"departureDateTime\": \"1965-05-28T17:-1:16\", " + 
                    " \"quota\": 475, " + 
                    " \"quotaFilled\": 23, " + 
                    " \"route\": { " + 
                    " \"id\": 923, " + 
                    " \"name\": \"\" " + 
                    " }, " + 
                    " \"plane\": { " + 
                    " \"name\": \"0LAgjLLsp\", " + 
                    " \"numberOfSeats\": 71, " + 
                    " \"company\": { " + 
                    " \"id\": 969, " + 
                    " \"name\": \"BZSicFgk7NcjdrmV\" " + 
                    " } " + 
                    " } " + 
                    " }, " + 
                    " \"isSold\": true " + 
                    " } ")
                .put(baseUrlOfSut + "/api/ticket")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("JSON parse error: Cannot deserialize value of type `java.util.Date` from String \"1965-05-28T17:-1:16\": not a valid representation (error: Failed to parse Date value '1965-05-28T17:-1:16': Cannot parse date \"1965-05-28T17:-1:16\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.util.Date` from String \"1965-05-28T17:-1:16\": not a valid representation (error: Failed to parse Date value '1965-05-28T17:-1:16': Cannot parse date \"1965-05-28T17:-1:16\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null))\n at [Source: (PushbackInputStream); line: 1, column: 85] (through reference chain: com.app.entity.Ticket[\"flight\"]->com.app.entity.Flight[\"departureDateTime\"])"))
                .body("'path'", containsString("/api/ticket"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"ticketCode\": \"tnNOEzKvrpJq\", " + 
                    " \"flightId\": 954 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/ticket")
                .then()
                .statusCode(409)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Ticket with this code already exists"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 770, " + 
                    " \"name\": \"Wo7U2nYyHoIcc\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/company")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"Me0ZT8\", " + 
                    " \"departureDateTime\": \"2014-06-02T12:27:34\", " + 
                    " \"quota\": -1953857321, " + 
                    " \"planeId\": 36, " + 
                    " \"routeId\": 287 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/flight")
                .then()
                .statusCode(409)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Flight with this name already exists"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"jicVsAR_zndIv\", " + 
                    " \"capacity\": 95 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/airport")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"xtxDP\", " + 
                    " \"departureAirportId\": 528, " + 
                    " \"arrivalAirportId\": 555 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/route")
                .then()
                .statusCode(409)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Route with this name already exists"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"Qx\", " + 
                    " \"numberOfSeats\": 630, " + 
                    " \"companyId\": 225 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/plane")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
