import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-01-09T17:55:16.325579524+01:00[Europe/Rome]
 * <br>
*  The generated test suite contains 11 tests
 * <br>
*  Covered targets: 22
 * <br>
*  Used time: 0h 5m 1s
 * <br>
*  Needed budget for current results: 98%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080/";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/airport")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2713))
                .body("[0].'name'", containsString("fuzzstring"))
                .body("[0].'capacity'", numberMatches(1.0))
                .body("[0].'location'", containsString("fuzzstring"))
                .body("[1].'name'", containsString("5igLYfNc"))
                .body("[1].'capacity'", numberMatches(215.0))
                .body("[1].'location'", containsString("HI2sGo8p8YNqPzT"))
                .body("[2].'name'", containsString("NLQU_FlS4ch_wB"))
                .body("[2].'capacity'", nullValue())
                .body("[2].'location'", nullValue())
                ; // Skipping assertions on the remaining 2710 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"999PsKIGHob8\", " + 
                    " \"company\": { " + 
                    " \"id\": 800, " + 
                    " \"name\": \"\" " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/plane")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("999PsKIGHob8"))
                .body("'numberOfSeats'", nullValue())
                .body("'company'.'name'", containsString(""));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"fuDaAiX2pyC6M\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/route")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("fuDaAiX2pyC6M"))
                .body("'departureAirport'", nullValue())
                .body("'arrivalAirport'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/airport/591")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("fuzzstring"))
                .body("'capacity'", numberMatches(1.0))
                .body("'location'", containsString("fuzzstring"))
                .body("'hibernateLazyInitializer'.isEmpty()", is(true));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/route/174")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("L53QQbMY3h"))
                .body("'departureAirport'", nullValue())
                .body("'arrivalAirport'", nullValue())
                .body("'hibernateLazyInitializer'.isEmpty()", is(true));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 879, " + 
                    " \"name\": \"H4\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/company")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("H4"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 109, " + 
                    " \"ticketCode\": \"I\", " + 
                    " \"price\": -1240842038, " + 
                    " \"isSold\": false " + 
                    " } ")
                .put(baseUrlOfSut + "/api/ticket")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'ticketCode'", containsString("I"))
                .body("'flight'", nullValue())
                .body("'price'", numberMatches(-1.240842038E9))
                .body("'isSold'", equalTo(false));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"L35UPJxJGy4hbNj\", " + 
                    " \"capacity\": 636, " + 
                    " \"location\": \"kQcDy8mfbD\" " + 
                    " } ")
                .put(baseUrlOfSut + "/api/airport")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("L35UPJxJGy4hbNj"))
                .body("'capacity'", numberMatches(636.0))
                .body("'location'", containsString("kQcDy8mfbD"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/company/505")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString(""))
                .body("'hibernateLazyInitializer'.isEmpty()", is(true));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"l\", " + 
                    " \"departureDateTime\": \"1916-13-19T01:59:19\", " + 
                    " \"arrivalDateTime\": \"2004-00-08T23:02:16\", " + 
                    " \"duration\": 395, " + 
                    " \"quotaFilled\": 922, " + 
                    " \"quotaFilledPercentage\": 245, " + 
                    " \"route\": { " + 
                    " \"id\": 19, " + 
                    " \"name\": \"U\", " + 
                    " \"departureAirport\": { " + 
                    " \"name\": \"9Glyr6XVvWNey\", " + 
                    " \"capacity\": 26 " + 
                    " }, " + 
                    " \"arrivalAirport\": { " + 
                    " \"name\": \"iNMpQ_DEm_eQt687\" " + 
                    " } " + 
                    " }, " + 
                    " \"plane\": { " + 
                    " \"id\": 1948726870, " + 
                    " \"name\": \"9YlXVUH\", " + 
                    " \"numberOfSeats\": 228 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/flight")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("l"))
                .body("'departureDateTime'", containsString("1917-01-19T01:59:19.000+0000"))
                .body("'arrivalDateTime'", containsString("2003-12-08T23:02:16.000+0000"))
                .body("'duration'", numberMatches(395.0))
                .body("'quota'", nullValue())
                .body("'quotaFilled'", numberMatches(922.0))
                .body("'quotaFilledPercentage'", numberMatches(245.0))
                .body("'route'.'name'", containsString("U"))
                .body("'route'.'departureAirport'.'name'", containsString("9Glyr6XVvWNey"))
                .body("'route'.'departureAirport'.'capacity'", numberMatches(26.0))
                .body("'route'.'departureAirport'.'location'", nullValue())
                .body("'route'.'arrivalAirport'.'name'", containsString("iNMpQ_DEm_eQt687"))
                .body("'route'.'arrivalAirport'.'capacity'", nullValue())
                .body("'route'.'arrivalAirport'.'location'", nullValue())
                .body("'plane'.'name'", containsString("9YlXVUH"))
                .body("'plane'.'numberOfSeats'", numberMatches(228.0))
                .body("'plane'.'company'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/company")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2337))
                .body("[0].'name'", containsString("fuzzstring"))
                .body("[1].'name'", containsString("l5PvjMKUS"))
                .body("[2].'name'", containsString("Rrf9GV49q5ggG"))
                ; // Skipping assertions on the remaining 2334 elements. This limit of 3 elements can be increased in the configurations
    }


}
