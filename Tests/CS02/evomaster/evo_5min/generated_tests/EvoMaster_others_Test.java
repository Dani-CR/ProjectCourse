import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-01-09T17:55:16.343071574+01:00[Europe/Rome]
 * <br>
*  The generated test suite contains 9 tests
 * <br>
*  Covered targets: 9
 * <br>
*  Used time: 0h 5m 1s
 * <br>
*  Needed budget for current results: 98%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080/";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"_OzxWalYmkad\", " + 
                    " \"departureDateTime\": \"1973-01-26T01:27:16\", " + 
                    " \"arrivalDateTime\": \"2100-01-21T-1:44:57\", " + 
                    " \"duration\": 717, " + 
                    " \"quota\": 824, " + 
                    " \"quotaFilled\": 308, " + 
                    " \"route\": { " + 
                    " \"name\": \"NNUFm435uBap\" " + 
                    " }, " + 
                    " \"plane\": { " + 
                    " \"id\": 505, " + 
                    " \"name\": \"LLsDge2znsWgjD\", " + 
                    " \"numberOfSeats\": 215 " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/api/flight")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("JSON parse error: Cannot deserialize value of type `java.util.Date` from String \"2100-01-21T-1:44:57\": not a valid representation (error: Failed to parse Date value '2100-01-21T-1:44:57': Cannot parse date \"2100-01-21T-1:44:57\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.util.Date` from String \"2100-01-21T-1:44:57\": not a valid representation (error: Failed to parse Date value '2100-01-21T-1:44:57': Cannot parse date \"2100-01-21T-1:44:57\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null))\n at [Source: (PushbackInputStream); line: 1, column: 86] (through reference chain: com.app.entity.Flight[\"arrivalDateTime\"])"))
                .body("'path'", containsString("/api/flight"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"Y8f3ApMSfjQ\", " + 
                    " \"departureDateTime\": \"1982-13-24T14:35:08\", " + 
                    " \"arrivalDateTime\": \"1917-05-29T-1:59:41\", " + 
                    " \"duration\": 662, " + 
                    " \"quota\": 723, " + 
                    " \"planeId\": 1658157481, " + 
                    " \"routeId\": 617 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/flight")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("JSON parse error: Cannot deserialize value of type `java.util.Date` from String \"1917-05-29T-1:59:41\": not a valid representation (error: Failed to parse Date value '1917-05-29T-1:59:41': Cannot parse date \"1917-05-29T-1:59:41\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.util.Date` from String \"1917-05-29T-1:59:41\": not a valid representation (error: Failed to parse Date value '1917-05-29T-1:59:41': Cannot parse date \"1917-05-29T-1:59:41\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null))\n at [Source: (PushbackInputStream); line: 1, column: 85] (through reference chain: com.app.DTO.FlightDTO[\"arrivalDateTime\"])"))
                .body("'path'", containsString("/api/flight"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"ticketCode\": \"Ps8csRHTFw3Kiq\", " + 
                    " \"flight\": { " + 
                    " \"name\": \"fA\", " + 
                    " \"departureDateTime\": \"2056-04-29T-1:59:24\", " + 
                    " \"duration\": 54, " + 
                    " \"route\": { " + 
                    " \"id\": 547, " + 
                    " \"name\": \"IG3iqRbnaEaeORI\" " + 
                    " }, " + 
                    " \"plane\": { " + 
                    " \"name\": \"91SlyvZu2_It\", " + 
                    " \"company\": { " + 
                    " \"id\": 601, " + 
                    " \"name\": \"_E\" " + 
                    " } " + 
                    " } " + 
                    " }, " + 
                    " \"price\": 73 " + 
                    " } ")
                .put(baseUrlOfSut + "/api/ticket")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("JSON parse error: Cannot deserialize value of type `java.util.Date` from String \"2056-04-29T-1:59:24\": not a valid representation (error: Failed to parse Date value '2056-04-29T-1:59:24': Cannot parse date \"2056-04-29T-1:59:24\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.util.Date` from String \"2056-04-29T-1:59:24\": not a valid representation (error: Failed to parse Date value '2056-04-29T-1:59:24': Cannot parse date \"2056-04-29T-1:59:24\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null))\n at [Source: (PushbackInputStream); line: 1, column: 76] (through reference chain: com.app.entity.Ticket[\"flight\"]->com.app.entity.Flight[\"departureDateTime\"])"))
                .body("'path'", containsString("/api/ticket"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"ticketCode\": \"xz4f\", " + 
                    " \"flightId\": 314 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/ticket")
                .then()
                .statusCode(409)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Ticket with this code already exists"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 6664837461164283030, " + 
                    " \"name\": \"VC\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/airport")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"3Sh0vpcQJVjj\", " + 
                    " \"arrivalDateTime\": \"1929-05-15T18:39:05\", " + 
                    " \"duration\": 586, " + 
                    " \"planeId\": 430, " + 
                    " \"routeId\": 85 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/flight")
                .then()
                .statusCode(409)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Flight with this name already exists"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"wb\", " + 
                    " \"companyId\": 462 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/plane")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 901, " + 
                    " \"name\": \"BKYG\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/company")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"I\", " + 
                    " \"departureAirportId\": 1741164384, " + 
                    " \"arrivalAirportId\": 134 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/route")
                .then()
                .statusCode(409)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Route with this name already exists"));
    }


}
