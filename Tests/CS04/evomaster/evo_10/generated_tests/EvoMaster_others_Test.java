import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-02-04T18:41:19.041+01:00[Europe/Rome]
 * <br>
*  The generated test suite contains 32 tests
 * <br>
*  Covered targets: 32
 * <br>
*  Used time: 0h 10m 1s
 * <br>
*  Needed budget for current results: 76%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "http://localhost:9966";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"firstName\": \"TR\", " + 
                    " \"id\": 900, " + 
                    " \"specialties\": [ " + 
                    " { " + 
                    " \"name\": \"vSn3_JQC6\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 618, " + 
                    " \"name\": \"nvQvS\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 625, " + 
                    " \"name\": \"l8CKzWEJC\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"5f_x\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/vets")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"type\": { " + 
                    " \"name\": \"\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/pets")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("java.lang.NullPointerException"))
                .body("'exMessage'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"telephone\": \"j\" " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/owners/130")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("java.lang.NullPointerException"))
                .body("'exMessage'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 255 " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/pettypes/255")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 536 " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/pettypes")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"description\": \"uYUnqAxpwicWf\" " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/visits/77")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("java.lang.NullPointerException"))
                .body("'exMessage'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"date\": \"Bjt\", " + 
                    " \"description\": \"QW5sW\", " + 
                    " \"id\": 543 " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/visits")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'exMessage'", containsString("I/O error while reading input message; nested exception is java.io.IOException: java.text.ParseException: Unparseable date: \"Bjt\""));
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/petclinic/api/specialties/380")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 58 " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/specialties")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"birthDate\": \"1951-04-13T07:50:15\", " + 
                    " \"type\": { " + 
                    " \"id\": 978 " + 
                    " }, " + 
                    " \"visits\": [ " + 
                    " { " + 
                    " \"description\": \"NnQK\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/pets/868")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("java.lang.NullPointerException"))
                .body("'exMessage'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"roles\": [ " + 
                    " {} " + 
                    " ], " + 
                    " \"username\": \"mW\" " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/users")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("java.lang.NullPointerException"))
                .body("'exMessage'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"city\": \"\", " + 
                    " \"firstName\": \"xy2rBEiY6cK8grm\" " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/owners")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("java.lang.NullPointerException"))
                .body("'exMessage'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"firstName\": \"\", " + 
                    " \"id\": 273, " + 
                    " \"lastName\": \"vK62RhC\", " + 
                    " \"specialties\": [ " + 
                    " {}, " + 
                    " { " + 
                    " \"id\": 427 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 195, " + 
                    " \"name\": \"w4XcII\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 309 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 168 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/vets/273")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/specialties/405")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"className\":\"org.springframework.dao.DataIntegrityViolationException\",\"exMessage\":\"could not execute statement; SQL [n/a]; constraint [FK_VET_SPECIALTIES_SPECIALTIES]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\"}"));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/vets/673")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/pettypes/776")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/owners/*/lastname/c3h09OV_YW9FFj_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/owners/642956241")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/vets/150")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"IW1M8LTJ3x80_6\" " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/pettypes/98")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/specialties/691")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/pets/523")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/pets")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/pettypes/547")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"PSqWN\" " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/specialties/85")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/specialties/718")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/visits")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/pets/68")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/visits/727")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"firstName\": \"9o8NBOEgEm5Hl\", " + 
                    " \"lastName\": \"MtnQCTnDhDB\" " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/vets/169")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/visits/301")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/owners/422")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
