import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-02-04T18:41:18.996+01:00[Europe/Rome]
 * <br>
*  The generated test suite contains 19 tests
 * <br>
*  Covered targets: 32
 * <br>
*  Used time: 0h 10m 0s
 * <br>
*  Needed budget for current results: 76%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:9966";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/owners/*/lastname/_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'firstName'", containsString("Carlos"))
                .body("[0].'lastName'", containsString("Estaban"))
                .body("[0].'address'", containsString("2335 Independence La."))
                .body("[0].'city'", containsString("Waunakee"))
                .body("[0].'telephone'", containsString("6085555487"))
                .body("[0].'pets'.size()", equalTo(0))
                .body("[1].'firstName'", containsString("9zeepGwplXhTf"))
                .body("[1].'lastName'", containsString("buijAMrcBrQb"))
                .body("[1].'address'", containsString("CLCZTdP"))
                .body("[1].'city'", containsString("CLU7A"))
                .body("[1].'telephone'", containsString("6"))
                .body("[1].'pets'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/pettypes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(710))
                .body("[0].'name'", containsString("O"))
                .body("[1].'name'", containsString("uThwMgFpjcnq"))
                .body("[2].'name'", containsString("7O56"))
                ; // Skipping assertions on the remaining 707 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .options(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/specialties")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(719))
                .body("[0].'name'", containsString("c9w4NAeYNprQCRY"))
                .body("[1].'name'", containsString("_37IC"))
                .body("[2].'name'", containsString("g"))
                ; // Skipping assertions on the remaining 716 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/pets/pettypes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(711))
                .body("[0].'name'", containsString("01rRE7LxLpYMPmca"))
                .body("[1].'name'", containsString("0DbCxcMHE8"))
                .body("[2].'name'", containsString("0MBi5Lr"))
                ; // Skipping assertions on the remaining 708 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/owners")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'firstName'", containsString("Carlos"))
                .body("[0].'lastName'", containsString("Estaban"))
                .body("[0].'address'", containsString("2335 Independence La."))
                .body("[0].'city'", containsString("Waunakee"))
                .body("[0].'telephone'", containsString("6085555487"))
                .body("[0].'pets'.size()", equalTo(0))
                .body("[1].'firstName'", containsString("9zeepGwplXhTf"))
                .body("[1].'lastName'", containsString("buijAMrcBrQb"))
                .body("[1].'address'", containsString("CLCZTdP"))
                .body("[1].'city'", containsString("CLU7A"))
                .body("[1].'telephone'", containsString("6"))
                .body("[1].'pets'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .options(baseUrlOfSut + "/petclinic/error")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/vets")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(138))
                .body("[0].'firstName'", containsString("pTfZu"))
                .body("[0].'lastName'", containsString("_"))
                .body("[0].'specialties'.size()", equalTo(0))
                .body("[1].'firstName'", containsString("d"))
                .body("[1].'lastName'", containsString("sAJ"))
                .body("[1].'specialties'.size()", equalTo(0))
                .body("[2].'firstName'", containsString("tFQLH"))
                .body("[2].'lastName'", containsString("XvQjsEGjqekh810X"))
                .body("[2].'specialties'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 135 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"firstName\": \"HROf7TfeBLqChH\", " + 
                    " \"id\": 103, " + 
                    " \"lastName\": \"HtxP6jEz6n2s\" " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/vets")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'firstName'", containsString("HROf7TfeBLqChH"))
                .body("'lastName'", containsString("HtxP6jEz6n2s"))
                .body("'specialties'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"6P8nm3\" " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/pettypes")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("6P8nm3"));
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 102, " + 
                    " \"name\": \"yEHYGpTt0\" " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/specialties")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("yEHYGpTt0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"enabled\": true, " + 
                    " \"password\": \"c_2eUVJ\", " + 
                    " \"roles\": [ " + 
                    " { " + 
                    " \"id\": 991, " + 
                    " \"name\": \"S1\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 527, " + 
                    " \"name\": \"nZO\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"xXbvytHLVj\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"ZuiEqhREosmDjTi\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 721, " + 
                    " \"name\": \"4_0cNMd_gYts2mj\" " + 
                    " } " + 
                    " ], " + 
                    " \"username\": \"VcjMRvM0Tv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/users")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("VcjMRvM0Tv"))
                .body("'password'", containsString("c_2eUVJ"))
                .body("'enabled'", equalTo(true))
                .body("'roles'.size()", equalTo(5))
                .body("'roles'[0].'name'", containsString("ROLE_xXbvytHLVj"))
                .body("'roles'[1].'name'", containsString("ROLE_ZuiEqhREosmDjTi"))
                .body("'roles'[2].'name'", containsString("ROLE_nZO"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"CLCZTdP\", " + 
                    " \"city\": \"CLU7A\", " + 
                    " \"firstName\": \"9zeepGwplXhTf\", " + 
                    " \"lastName\": \"buijAMrcBrQb\", " + 
                    " \"telephone\": \"6\" " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/owners")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'firstName'", containsString("9zeepGwplXhTf"))
                .body("'lastName'", containsString("buijAMrcBrQb"))
                .body("'address'", containsString("CLCZTdP"))
                .body("'city'", containsString("CLU7A"))
                .body("'telephone'", containsString("6"))
                .body("'pets'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .head(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .put(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .patch(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
