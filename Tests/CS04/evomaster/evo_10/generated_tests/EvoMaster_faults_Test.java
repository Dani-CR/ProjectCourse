import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-02-04T18:41:18.980+01:00[Europe/Rome]
 * <br>
*  The generated test suite contains 6 tests
 * <br>
*  Covered targets: 18
 * <br>
*  Used time: 0h 10m 0s
 * <br>
*  Needed budget for current results: 76%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:9966";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        
        // Fault100. HTTP Status 500. DELETE:/petclinic/error
        given().accept("text/html")
                .delete(baseUrlOfSut + "/petclinic/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        
        // Fault100. HTTP Status 500. PUT:/petclinic/error
        given().accept("text/html")
                .put(baseUrlOfSut + "/petclinic/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/petclinic/error
        given().accept("text/html")
                .post(baseUrlOfSut + "/petclinic/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_3_with500() throws Exception {
        
        // Fault100. HTTP Status 500. PATCH:/petclinic/error
        given().accept("text/html")
                .patch(baseUrlOfSut + "/petclinic/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_4_with500() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/petclinic/error
        given().accept("text/html")
                .get(baseUrlOfSut + "/petclinic/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_5_with500() throws Exception {
        
        // Fault100. HTTP Status 500. HEAD:/petclinic/error
        given().accept("*/*")
                .head(baseUrlOfSut + "/petclinic/error")
                .then()
                .statusCode(500)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
