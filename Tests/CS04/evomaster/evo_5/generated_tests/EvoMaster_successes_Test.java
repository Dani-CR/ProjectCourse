import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-02-04T18:24:20.884+01:00[Europe/Rome]
 * <br>
*  The generated test suite contains 26 tests
 * <br>
*  Covered targets: 46
 * <br>
*  Used time: 0h 5m 1s
 * <br>
*  Needed budget for current results: 98%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:9966";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/pettypes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(320))
                .body("[0].'name'", containsString("lmXgzErVJbNAZ9hB"))
                .body("[1].'name'", containsString("9kfrmHqKb"))
                .body("[2].'name'", containsString("sEvG2JWR3BUdbI"))
                ; // Skipping assertions on the remaining 317 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/pets/pettypes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(320))
                .body("[0].'name'", containsString("050oJlUtN5ddt"))
                .body("[1].'name'", containsString("0DuOeY1QS3p6"))
                .body("[2].'name'", containsString("0L18xERS_MC"))
                ; // Skipping assertions on the remaining 317 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .options(baseUrlOfSut + "/petclinic/error")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/specialties/39")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("oVM8fPn710lgKt"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/vets/99")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'firstName'", containsString("oTr"))
                .body("'lastName'", containsString("0WpIG8A2k4I4uxo"))
                .body("'specialties'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/owners/*/lastname/c")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'firstName'", containsString("OaoM"))
                .body("[0].'lastName'", containsString("coEHTEFesFtqbG"))
                .body("[0].'address'", containsString("02h9xBlve0PyQzD"))
                .body("[0].'city'", containsString("kyzl9NBqkWlz1lnq"))
                .body("[0].'telephone'", containsString("43"))
                .body("[0].'pets'.size()", equalTo(0))
                .body("[1].'firstName'", containsString("OaoM"))
                .body("[1].'lastName'", containsString("coEHTEFesFtqbG"))
                .body("[1].'address'", containsString("02h9xBlve0PyQzD"))
                .body("[1].'city'", containsString("kyzl9NBqkWlz1lnq"))
                .body("[1].'telephone'", containsString("43"))
                .body("[1].'pets'.size()", equalTo(0))
                .body("[2].'firstName'", containsString("OaoM"))
                .body("[2].'lastName'", containsString("coEHTEFesFtqbG"))
                .body("[2].'address'", containsString("02h9xBlve0PyQzD"))
                .body("[2].'city'", containsString("kyzl9NBqkWlz1lnq"))
                .body("[2].'telephone'", containsString("43"))
                .body("[2].'pets'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .options(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/owners")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("[0].'firstName'", containsString("Eduardo"))
                .body("[0].'lastName'", containsString("Rodriquez"))
                .body("[0].'address'", containsString("2693 Commerce St."))
                .body("[0].'city'", containsString("McFarland"))
                .body("[0].'telephone'", containsString("6085558763"))
                .body("[0].'pets'.size()", equalTo(0))
                .body("[1].'firstName'", containsString("Jeff"))
                .body("[1].'lastName'", containsString("Black"))
                .body("[1].'address'", containsString("1450 Oak Blvd."))
                .body("[1].'city'", containsString("Monona"))
                .body("[1].'telephone'", containsString("6085555387"))
                .body("[1].'pets'.size()", equalTo(0))
                .body("[2].'firstName'", containsString("OaoM"))
                .body("[2].'lastName'", containsString("coEHTEFesFtqbG"))
                .body("[2].'address'", containsString("02h9xBlve0PyQzD"))
                .body("[2].'city'", containsString("kyzl9NBqkWlz1lnq"))
                .body("[2].'telephone'", containsString("43"))
                .body("[2].'pets'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/vets")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(109))
                .body("[0].'firstName'", containsString("Linda"))
                .body("[0].'lastName'", containsString("Douglas"))
                .body("[0].'specialties'.size()", equalTo(2))
                .body("[0].'specialties'[0].'name'", containsString("BHrSsJ5fLW"))
                .body("[0].'specialties'[1].'name'", containsString("F_KmX"))
                .body("[1].'firstName'", containsString("Rafael"))
                .body("[1].'lastName'", containsString("Ortega"))
                .body("[1].'specialties'.size()", equalTo(1))
                .body("[1].'specialties'[0].'name'", containsString("F_KmX"))
                .body("[2].'firstName'", containsString("3"))
                .body("[2].'lastName'", containsString("Ub51imYO0r"))
                .body("[2].'specialties'.size()", equalTo(0))
                ; // Skipping assertions on the remaining 106 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/petclinic/api/specialties")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(303))
                .body("[0].'name'", containsString("F_KmX"))
                .body("[1].'name'", containsString("BHrSsJ5fLW"))
                .body("[2].'name'", containsString("IaKOc5G_wL"))
                ; // Skipping assertions on the remaining 300 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"phZcmAKnV\" " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/specialties")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("phZcmAKnV"));
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"enabled\": false, " + 
                    " \"password\": \"83Op\", " + 
                    " \"roles\": [ " + 
                    " { " + 
                    " \"id\": 80, " + 
                    " \"name\": \"irXkt\" " + 
                    " } " + 
                    " ], " + 
                    " \"username\": \"v5SxFBhemNLy\" " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/users")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'username'", containsString("v5SxFBhemNLy"))
                .body("'password'", containsString("83Op"))
                .body("'enabled'", equalTo(false))
                .body("'roles'.size()", equalTo(1))
                .body("'roles'[0].'name'", containsString("ROLE_irXkt"));
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"02h9xBlve0PyQzD\", " + 
                    " \"city\": \"kyzl9NBqkWlz1lnq\", " + 
                    " \"firstName\": \"OaoM\", " + 
                    " \"lastName\": \"coEHTEFesFtqbG\", " + 
                    " \"pets\": [ " + 
                    " { " + 
                    " \"name\": \"C99pWvtTc4Z8gSou\" " + 
                    " }, " + 
                    " { " + 
                    " \"birthDate\": \"2027-05-28T11:00:00\", " + 
                    " \"id\": 354, " + 
                    " \"name\": \"E1NJsAnAjXu\", " + 
                    " \"visits\": [] " + 
                    " } " + 
                    " ], " + 
                    " \"telephone\": \"43\" " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/owners")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'firstName'", containsString("OaoM"))
                .body("'lastName'", containsString("coEHTEFesFtqbG"))
                .body("'address'", containsString("02h9xBlve0PyQzD"))
                .body("'city'", containsString("kyzl9NBqkWlz1lnq"))
                .body("'telephone'", containsString("43"))
                .body("'pets'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"firstName\": \"oA5z8MLZ\", " + 
                    " \"lastName\": \"rz\" " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/vets")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'firstName'", containsString("oA5z8MLZ"))
                .body("'lastName'", containsString("rz"))
                .body("'specialties'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 814, " + 
                    " \"name\": \"ouDXA4\" " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/pettypes")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("ouDXA4"));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 234, " + 
                    " \"name\": \"5npIfueIo47MLjqk\" " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/pettypes/234")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"firstName\": \"eeZ9mlk\", " + 
                    " \"lastName\": \"adC38ygYvgLepIru\" " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/vets/126")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/vets/35")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/specialties/465")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 58, " + 
                    " \"name\": \"X1UGpFjPCMT\" " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/specialties/58")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("*/*")
                .put(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .head(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .patch(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
