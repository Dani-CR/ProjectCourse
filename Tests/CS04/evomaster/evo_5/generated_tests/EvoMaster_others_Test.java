import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-02-04T18:24:20.940+01:00[Europe/Rome]
 * <br>
*  The generated test suite contains 34 tests
 * <br>
*  Covered targets: 36
 * <br>
*  Used time: 0h 5m 1s
 * <br>
*  Needed budget for current results: 98%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "http://localhost:9966";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/pettypes/346")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/owners/9")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/")
                .then()
                .statusCode(302)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/pets")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/pets/752")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/specialties/42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/owners/*/lastname/efm9R5")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"date\": \"5ZlLLKbEEAMi1Yg\", " + 
                    " \"id\": 445, " + 
                    " \"pet\": { " + 
                    " \"id\": 707, " + 
                    " \"visits\": [] " + 
                    " } " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/visits/445")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("java.lang.NullPointerException"))
                .body("'exMessage'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/petclinic/api/specialties")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"lastName\": \"wZVyB9IXtdZ2H4v6\", " + 
                    " \"specialties\": [ " + 
                    " { " + 
                    " \"name\": \"_Fg6xciW\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"DaiIQAVsPRM\" " + 
                    " }, " + 
                    " {}, " + 
                    " { " + 
                    " \"id\": -1008454492, " + 
                    " \"name\": \"Qm9nN\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"FVEWCmHbD\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/vets/722")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/petclinic/api/users")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("java.lang.Exception"))
                .body("'exMessage'", containsString("User must have at least a role set!"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"8e4HcsSnZpq6I_Cd\", " + 
                    " \"firstName\": \"ZE734I8VN\", " + 
                    " \"lastName\": \"BuyF8isJ_\", " + 
                    " \"pets\": [ " + 
                    " { " + 
                    " \"birthDate\": \"1955-13-30T21:33:13\", " + 
                    " \"id\": 284 " + 
                    " } " + 
                    " ], " + 
                    " \"telephone\": \"7ha\" " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/owners")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("java.lang.NullPointerException"))
                .body("'exMessage'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 157 " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/specialties/157")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"date\": \"v9wSElLAWX7\", " + 
                    " \"description\": \"COX\", " + 
                    " \"id\": 37, " + 
                    " \"pet\": { " + 
                    " \"name\": \"JLrT_IKRe\", " + 
                    " \"owner\": { " + 
                    " \"address\": \"TAUcCjoKOVrY\", " + 
                    " \"firstName\": \"E8o6nKeZw0HH\", " + 
                    " \"lastName\": \"2n\", " + 
                    " \"pets\": [] " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/visits")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("java.lang.NullPointerException"))
                .body("'exMessage'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"Hb34WLJEC9\", " + 
                    " \"owner\": { " + 
                    " \"address\": \"Ei7JM47V730\", " + 
                    " \"firstName\": \"Mc2UMwcsHIC\", " + 
                    " \"telephone\": \"VGtjw9\" " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/pets")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("java.lang.NullPointerException"))
                .body("'exMessage'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"type\": { " + 
                    " \"id\": 765, " + 
                    " \"name\": \"kzG\" " + 
                    " }, " + 
                    " \"visits\": [ " + 
                    " { " + 
                    " \"description\": \"PF9RJEMni1dL\", " + 
                    " \"id\": 962 " + 
                    " }, " + 
                    " { " + 
                    " \"description\": \"IAD\", " + 
                    " \"id\": 168 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/pets/743")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("java.lang.NullPointerException"))
                .body("'exMessage'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"oP_2hfqPbs\", " + 
                    " \"pets\": [] " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/owners/888")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'className'", containsString("java.lang.NullPointerException"))
                .body("'exMessage'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 41 " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/pettypes")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/petclinic/api/pettypes/429")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"firstName\": \"0E\", " + 
                    " \"specialties\": [ " + 
                    " { " + 
                    " \"id\": 408, " + 
                    " \"name\": \"I\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 982 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/petclinic/api/vets")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/specialties/3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("{\"className\":\"org.springframework.dao.DataIntegrityViolationException\",\"exMessage\":\"could not execute statement; SQL [n/a]; constraint [FK_VET_SPECIALTIES_SPECIALTIES]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\"}"));
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/pets/984")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/owners/311")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": 223, " + 
                    " \"name\": \"NLLBs2XpyArUg\" " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/pettypes/223")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/pets/613")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/visits/661")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/visits/1223983937")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/owners/974")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/vets/129")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/vets/658")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/pets")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/specialties/18")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/owners/*/lastname/NgkrldHbxUVNC_F")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/petclinic/api/pettypes/716")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"firstName\": \"XwCVkcicaWfztC\", " + 
                    " \"lastName\": \"2LXzERbixZ04u\", " + 
                    " \"specialties\": [ " + 
                    " {}, " + 
                    " { " + 
                    " \"id\": 276 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/vets/97")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/visits")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/pettypes/-909422627")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/petclinic/api/specialties/8")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"4Smq2HwW\" " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/specialties/178")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"Hd24g6\", " + 
                    " \"city\": \"sA8Nk\", " + 
                    " \"firstName\": \"mQcwou2_Ub6n\", " + 
                    " \"lastName\": \"Z9FdGIP\", " + 
                    " \"pets\": [ " + 
                    " { " + 
                    " \"birthDate\": \"1937-13-12T18:50:28\", " + 
                    " \"name\": \"4oXIr0bGph\", " + 
                    " \"visits\": [ " + 
                    " { " + 
                    " \"date\": \"BLr8Xz0l5VK2x\", " + 
                    " \"id\": 84 " + 
                    " }, " + 
                    " { " + 
                    " \"date\": \"mH0qEUw1h\", " + 
                    " \"description\": \"eq5Jgw8Ew95LF\", " + 
                    " \"id\": 596 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 754 " + 
                    " }, " + 
                    " { " + 
                    " \"date\": \"j9hE08wE\", " + 
                    " \"id\": 27 " + 
                    " }, " + 
                    " { " + 
                    " \"date\": \"\" " + 
                    " } " + 
                    " ] " + 
                    " }, " + 
                    " { " + 
                    " \"birthDate\": \"1964-05-07T25:51:19\" " + 
                    " }, " + 
                    " { " + 
                    " \"birthDate\": \"1943-05-16T16:58:50\", " + 
                    " \"id\": 151 " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"8M854S_vU\", " + 
                    " \"visits\": [ " + 
                    " { " + 
                    " \"date\": \"0fsgSR5\", " + 
                    " \"id\": 410 " + 
                    " }, " + 
                    " { " + 
                    " \"description\": \"QkcsjKvuLkA4\" " + 
                    " }, " + 
                    " { " + 
                    " \"date\": \"b5vI\", " + 
                    " \"description\": \"EihwHnt\", " + 
                    " \"id\": 847 " + 
                    " }, " + 
                    " { " + 
                    " \"date\": \"wPA7\", " + 
                    " \"description\": \"T2hq7PHsByH\" " + 
                    " } " + 
                    " ] " + 
                    " } " + 
                    " ], " + 
                    " \"telephone\": \"2\" " + 
                    " } ")
                .put(baseUrlOfSut + "/petclinic/api/owners/331")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
