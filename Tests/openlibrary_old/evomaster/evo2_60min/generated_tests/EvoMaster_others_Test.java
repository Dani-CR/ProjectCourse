import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-10-11T17:05:08.530087579+02:00[Europe/Rome]
 * <br>
*  The generated test suite contains 7 tests
 * <br>
*  Covered targets: 7
 * <br>
*  Used time: 1h 0m 0s
 * <br>
*  Needed budget for current results: 31%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080/";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/covers/I2Av2DiL9/DPq7Lpwu_vuj073-g0c3qP7H.jpg")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("{\"error\": \"notfound\", \"key\": \"/covers/I2Av2DiL9/DPq7Lpwu_vuj073-g0c3qP7H.jpg\"}"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/books/mvYFeS5G1UOxO")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("{\"error\": \"notfound\", \"key\": \"/books/mvYFeS5G1UOxO\"}"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/isbn/MPcLptHgTvOWH")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/works/nl4_deE6cB5TU")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("{\"error\": \"notfound\", \"key\": \"/works/nl4_deE6cB5TU\"}"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/authors/3JKrOhih/works.json?limit=302")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("{\"error\": \"notfound\", \"key\": \"/authors/3JKrOhih/works\"}"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/authors/07JU9riB7C6NCw.json")
                .then()
                .statusCode(404)
                .assertThat()
                .body(containsString("{\"error\": \"notfound\", \"key\": \"/authors/07JU9riB7C6NCw\"}"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/volumes/brief/MIap/B7Z.json")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
