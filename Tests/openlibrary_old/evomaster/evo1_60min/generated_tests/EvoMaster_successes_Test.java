import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-10-11T15:19:55.307532882+02:00[Europe/Rome]
 * <br>
*  The generated test suite contains 6 tests
 * <br>
*  Covered targets: 10
 * <br>
*  Used time: 1h 0m 0s
 * <br>
*  Needed budget for current results: 37%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080/";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/search/authors.json?q=h")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'numFound'", numberMatches(0.0))
                .body("'start'", numberMatches(0.0))
                .body("'numFoundExact'", equalTo(true))
                .body("'docs'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/search.json?q=Fh0eGOGtdhip")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'numFound'", numberMatches(0.0))
                .body("'start'", numberMatches(0.0))
                .body("'numFoundExact'", equalTo(true))
                .body("'docs'.size()", equalTo(0))
                .body("'num_found'", numberMatches(0.0))
                .body("'q'", containsString("Fh0eGOGtdhip"))
                .body("'offset'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/api/books?" + 
                    "bibkeys=c8ivdhp3O4&" + 
                    "jscmd=V")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("var _OLBookInfo = {};"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/subjects/p.json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'key'", containsString("/subjects/p"))
                .body("'name'", containsString("p"))
                .body("'subject_type'", containsString("subject"))
                .body("'work_count'", numberMatches(0.0))
                .body("'works'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/subjects/2p4P3Kczxz.json?details=true")
                .then()
                .statusCode(301)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/books/OL53924W")
                .then()
                .statusCode(301)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
