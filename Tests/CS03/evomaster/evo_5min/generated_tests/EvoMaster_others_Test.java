import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-01-10T18:27:11.364535489+01:00[Europe/Rome]
 * <br>
*  The generated test suite contains 2 tests
 * <br>
*  Covered targets: 2
 * <br>
*  Used time: 0h 5m 0s
 * <br>
*  Needed budget for current results: 52%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"created\": \"2057-07-15T-1:12:36\", " + 
                    " \"id\": 410, " + 
                    " \"username\": \"vQn0\", " + 
                    " \"videos\": [ " + 
                    " { " + 
                    " \"modified\": \"1922-04-17T-1:01:49\", " + 
                    " \"url\": \"q\" " + 
                    " }, " + 
                    " {}, " + 
                    " { " + 
                    " \"created\": \"1965-04-03T24:57:49\", " + 
                    " \"id\": 332, " + 
                    " \"modified\": \"2085-01-15T17:25:56\", " + 
                    " \"size\": 0.13672703914870554, " + 
                    " \"title\": \"3CPmYQ7C6u\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1.0/users/sign-up")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("JSON parse error: Cannot deserialize value of type `java.util.Date` from String \"2057-07-15T-1:12:36\": not a valid representation (error: Failed to parse Date value '2057-07-15T-1:12:36': Cannot parse date \"2057-07-15T-1:12:36\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.util.Date` from String \"2057-07-15T-1:12:36\": not a valid representation (error: Failed to parse Date value '2057-07-15T-1:12:36': Cannot parse date \"2057-07-15T-1:12:36\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null))\n at [Source: (PushbackInputStream); line: 1, column: 12] (through reference chain: com.streaming.domains.User[\"created\"])"))
                .body("'path'", containsString("/api/v1.0/users/sign-up"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/v1.0/videos/download/14")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("File not found urlll"))
                .body("'path'", containsString("/api/v1.0/videos/download/14"));
    }


}
