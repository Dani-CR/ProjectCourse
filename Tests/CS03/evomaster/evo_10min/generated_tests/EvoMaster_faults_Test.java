import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2025-01-10T18:44:25.609160518+01:00[Europe/Rome]
 * <br>
*  The generated test suite contains 3 tests
 * <br>
*  Covered targets: 9
 * <br>
*  Used time: 0h 10m 0s
 * <br>
*  Needed budget for current results: 74%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_with500() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/api/v1.0/users/sign-up
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"created\": \"1939-08-26T02:45:19\", " + 
                    " \"modified\": \"1939-13-21T04:06:51\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1.0/users/sign-up")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/v1.0/users/sign-up"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_with500() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/api/v1.0/videos/upload
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("file=bRYMdh3Q5fF")
                .post(baseUrlOfSut + "/api/v1.0/videos/upload?title=laPu")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("Current request is not a multipart request"))
                .body("'path'", containsString("/api/v1.0/videos/upload"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_with500() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/api/v1.0/videos/download/{id}
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/v1.0/videos/download/90")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString("No value present"))
                .body("'path'", containsString("/api/v1.0/videos/download/90"));
    }


}
